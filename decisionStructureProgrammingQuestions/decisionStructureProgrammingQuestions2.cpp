#include "decisionStructureProgrammingQuestions2.h"
#include <iostream>
#include <limits>
#include <string>

/*******************************************
----- DECISION_STRUCTURE_QUESTION_2 --------
********************************************/
// Greater Area of Two Rectangles
// Input dimensions for two rectangles and determine which has the greater area.
// Part of the Cyber Console Decision Series.

namespace ds2
{
    // üîπ Provides the project header used in the main Cyber Console menu.
    std::string getHeader()
    {
        return "üìê RECTANGLE AREA COMPARATOR üß†";
    }
    std::string getMenuLabel()
    {
        return "RECTANGLE AREA COMPARATOR";
    }

    // üîπ Handles secure numeric input with error checking and retry loop.
    double getValidatedInput(const std::string &prompt)
    {
        double value;
        while (true)
        {
            std::cout << prompt;
            std::cin >> value;

            if (std::cin.fail())
            {
                std::cin.clear();                                                   // clear error flag
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // discard bad input
                std::cout << "‚ö†Ô∏è  Invalid input! Please enter a numeric value.\n\n";
            }
            else
            {
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // clear remaining input
                return value;
            }
        }
    }

    void run()
    {
        char rerunChoice; // üîπ Stores the user‚Äôs decision on whether to re-run the comparison.

        do
        {
            double length1, width1, length2, width2;
            const int totalWidth = 56; // Total width for area display

            std::cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
            std::cout << "‚ïë    üìê RECTANGLE AREA COMPARATOR - CYBER MODE        ‚ïë\n";
            std::cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n";
            std::cout << "‚ïë [SECURE_INPUT] Provide dimensions of two rectangles ‚ïë\n";
            std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n";

            // Input Rectangle I
            std::cout << "\nüî∏ Rectangle I\n";
            length1 = getValidatedInput("Enter Length: ");
            width1 = getValidatedInput("Enter Width : ");

            // Input Rectangle II
            std::cout << "\nüî∏ Rectangle II\n";
            length2 = getValidatedInput("Enter Length: ");
            width2 = getValidatedInput("Enter Width : ");

            double area1 = length1 * width1;
            double area2 = length2 * width2;

            std::cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
            std::cout << "‚ïë           üßæ COMPARING RECTANGLE AREAS             ‚ïë\n";
            std::cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n";
            std::cout << "‚ïë Area of Rectangle I  : " << area1;
            insertAreaPadding(area1, totalWidth);
            std::cout << "‚ïë Area of Rectangle II : " << area2;
            insertAreaPadding(area2, totalWidth);
            std::cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n";
            std::cout << "‚ïë ‚û§ Comparison Result:                               ‚ïë\n";
            std::cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n";

            // Area Checks
            if (area1 < 0 || area2 < 0)
            {
                std::cout << "‚ïë ‚ö†Ô∏è  Error: Area cannot be negative! Check input.    ‚ïë\n";
            }
            else if (area1 == 0 && area2 == 0)
            {
                std::cout << "‚ïë ‚û§ Both rectangles have zero area.                  ‚ïë\n";
            }
            else if (area1 > area2)
            {
                std::cout << "‚ïë ‚û§ Rectangle I has the greater area üî∫              ‚ïë\n";
            }
            else if (area2 > area1)
            {
                std::cout << "‚ïë ‚û§ Rectangle II has the greater area üî∫             ‚ïë\n";
            }
            else
            {
                std::cout << "‚ïë ‚û§ Both rectangles have the same area ‚úÖ            ‚ïë\n";
            }

            std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n";
            std::cout << "\n‚úÖ Execution completed. Geometry secured. üîê\n";

            std::cout << "\nüîÅ Would you like to compare another set of rectangles? (Y/N): ";
            std::cin >> rerunChoice;

        } while (rerunChoice == 'Y' || rerunChoice == 'y');
    }

    void insertAreaPadding(double value, int totalWidth)
    {
        std::string valueStr = std::to_string(value);
        int contentLength = 24 + static_cast<int>(valueStr.length()); // "Area of Rectangle I  : "
        int pad = totalWidth - contentLength;
        for (int i = 0; i < pad; ++i)
            std::cout << " ";
        std::cout << "‚ïë\n";
    }

}
